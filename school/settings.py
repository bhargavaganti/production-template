"""
Default Django settings fo

Generated by 'django-admin startproject' using Django 1.10.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import dj_database_url
import dj_email_url

# This line imports a large number of defaults, so that
# they do not need to be specified here directly.
# You may always override these defaults below.
from danceschool.default_settings import *

# This line is required by Django CMS to determine default URLs
# for pages.
SITE_ID = 1

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get('DEBUG', 'False') == 'True')

# SECURITY WARNING: ALLOWED_HOSTS must be updated for production
# to permit public access of the site.  Because *.herokuapp.com
# is currently allowed, this project is insecure by default.
# It is STRONGLY recommended that you update this to limit
# to your own domain before making your site public.
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver', '.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    # The CMS App goes first so that it will find plugins in other installed apps
    'cms',

    # The dynamic preferences app goes second so that it will find and register
    # project preferences in other installed apps
    'dynamic_preferences',

    # ## Typically, if you have a custom app for custom functionality,
    # ## it will be added here:
    # '< my_custom_app >',

    # ## This is the core app of the django-danceschool project that
    # ## is required for all installations:
    'danceschool.core',

    # ## These apps provide additional functionality and are optional,
    # ## but they are enabled by default:
    'danceschool.financial',
    'danceschool.private_events',
    'danceschool.discounts',
    'danceschool.vouchers',
    'danceschool.prerequisites',
    'danceschool.stats',
    'danceschool.news',
    'danceschool.faq',
    'danceschool.banlist',

    # ## Uncomment to add private lesson scheduling functionality:
    # 'danceschool.private_lessons',

    # ## Uncomment the lines below to add payment processor integration:
    # 'danceschool.payments.paypal',
    # 'danceschool.payments.stripe',
    # 'danceschool.payments.square',

    # These are required for the CMS
    'menus',
    'sekizai',
    'treebeard',

    # Django-admin-sortable permits us to drag and drop sort page content items
    'adminsortable2',

    # Django-allauth is used for better authentication options
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # For rich text in Django CMS
    'ckeditor_filebrowser_filer',
    'djangocms_text_ckeditor',

    # This helps to make forms pretty
    'crispy_forms',

    # Autocomplete overrides some admin features so it goes here (above admin)
    'dal',
    'dal_select2',

    # This allows for custom date range filtering of financials, etc.
    'daterange_filter',

    # Makes Django CMS prettier
    'djangocms_admin_style',

    # Provides configurable feedback and response forms
    'djangocms_forms',

    # This allows for PDF export of views
    'easy_pdf',

    # Django-filer allows for file and image management
    'easy_thumbnails',
    'filer',

    # This permits simple task scheduling
    'huey.contrib.djhuey',

    # Django-polymorphic is used for Event multi-table inheritance
    'polymorphic',

    # Django-storages allows use of Amazon S3 or other solutions for
    # hosting user uploaded files
    'storages',

    # Disable Django's own staticfiles handling in favour of WhiteNoise, for
    # greater consistency between gunicorn and `./manage.py runserver`. See:
    # http://whitenoise.evans.io/en/stable/django.html#using-whitenoise-in-development
    'whitenoise.runserver_nostatic',

    # Finally, the Django contrib apps needed for this project and
    # its dependencies
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.admin',
]

MIDDLEWARE = [
    # This middleware is required by Django CMS for intelligent reloading on updates.
    'cms.middleware.utils.ApphookReloadMiddleware',
    # This middleware is used by WhiteNoise for static file handling
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    # These pieces of middleware are required by Django CMS
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',
    'cms.middleware.language.LanguageCookieMiddleware',
]

ROOT_URLCONF = 'school.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'OPTIONS': {
            # List of callables that know how to import templates from various sources.
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'django.template.context_processors.csrf',
                'sekizai.context_processors.sekizai',
                'cms.context_processors.cms_settings',
            ],
            'debug': False,
        },
    }
]

WSGI_APPLICATION = 'school.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Change 'default' database configuration with $DATABASE_URL.
DATABASES['default'].update(dj_database_url.config(conn_max_age=500))

# Set Email using the dj-email-url app, which parses $EMAIL_URL
email_config = dj_email_url.config()
EMAIL_FILE_PATH = email_config.get('EMAIL_FILE_PATH')
EMAIL_HOST_USER = email_config.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = email_config.get('EMAIL_HOST_PASSWORD')
EMAIL_HOST = email_config.get('EMAIL_HOST')
EMAIL_PORT = email_config.get('EMAIL_PORT')
EMAIL_BACKEND = email_config.get('EMAIL_BACKEND')
EMAIL_USE_TLS = email_config.get('EMAIL_USE_TLS')
EMAIL_USE_SSL = email_config.get('EMAIL_USE_SSL')

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en'

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# AWS must be configured in the environment variables.  If it is
# not configured, then the project will default to local storage.
if (
    os.environ.get('AWS_STORAGE_BUCKET_NAME') and
    os.environ.get('AWS_SECRET_ACCESS_KEY') and
    os.environ.get('AWS_STORAGE_BUCKET_NAME')
):
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')

# Payment processor details are loaded here, if they have been added
# as environment variables

# Paypal
PAYPAL_MODE = os.environ.get('PAYPAL_MODE', 'sandbox')
PAYPAL_CLIENT_ID = os.environ.get('PAYPAL_CLIENT_ID')
PAYPAL_CLIENT_SECRET = os.environ.get('PAYPAL_CLIENT_SECRET')

if PAYPAL_MODE and PAYPAL_CLIENT_ID and PAYPAL_CLIENT_SECRET:
    INSTALLED_APPS.append('danceschool.payments.paypal')

# Square
SQUARE_LOCATION_ID = os.environ.get('SQUARE_LOCATION_ID')
SQUARE_APPLICATION_ID = os.environ.get('SQUARE_APPLICATION_ID')
SQUARE_ACCESS_TOKEN = os.environ.get('SQUARE_ACCESS_TOKEN')

if SQUARE_LOCATION_ID and SQUARE_ACCESS_TOKEN and SQUARE_APPLICATION_ID:
    INSTALLED_APPS.append('danceschool.payments.square')

# Stripe
STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY')
STRIPE_PRIVATE_KEY = os.environ.get('STRIPE_PRIVATE_KEY')

if STRIPE_PUBLIC_KEY and STRIPE_PRIVATE_KEY:
    INSTALLED_APPS.append('danceschool.payments.stripe')
